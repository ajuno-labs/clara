use chrono::{DateTime, Local, TimeZone};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::fmt;

#[derive(Debug)]
pub struct Project {
    pub id: u32,
    pub name: String,
    pub description: Option<String>,
    pub created_at: i64,
    pub updated_at: i64,
    pub extras: Option<Value>,
}

impl fmt::Display for Project {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "Project ID: {}, Name: {}, Created: {}",
            self.id, self.name, self.created_at_datetime()
        )?;

        if let Some(description) = &self.description {
            write!(f, ", Description: {}", description)?;
        }

        Ok(())
    }
}

#[derive(Serialize, Deserialize)]
pub struct ProjectDraft {
    pub name: String,
    pub description: Option<String>,
    pub extras: Option<Value>,
}

impl ProjectDraft {
    pub fn new() -> Self {
        ProjectDraft {
            name: String::new(),
            description: None,
            extras: None,
        }
    }

    pub fn to_project(self) -> Result<Project, String> {
        if self.name.trim().is_empty() {
            return Err("Project name cannot be empty".to_string());
        }

        let now = Local::now().timestamp();

        Ok(Project {
            id: 0, // Will be auto-generated by DB
            name: self.name.trim().to_string(),
            description: self.description.map(|d| d.trim().to_string()).filter(|d| !d.is_empty()),
            created_at: now,
            updated_at: now,
            extras: self.extras,
        })
    }

    pub fn to_toml(&self) -> Result<String, toml::ser::Error> {
        toml::to_string_pretty(self)
    }

    pub fn from_toml(toml: &str) -> Result<Self, toml::de::Error> {
        toml::from_str(toml)
    }
}

impl Project {
    pub fn created_at_datetime(&self) -> DateTime<Local> {
        Local.timestamp_opt(self.created_at, 0).unwrap()
    }
    
    pub fn updated_at_datetime(&self) -> DateTime<Local> {
        Local.timestamp_opt(self.updated_at, 0).unwrap()
    }

    pub fn to_draft(&self) -> ProjectDraft {
        ProjectDraft {
            name: self.name.clone(),
            description: self.description.clone(),
            extras: self.extras.clone(),
        }
    }
}