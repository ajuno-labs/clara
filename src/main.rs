mod task;

use chrono::Utc;
use task::{Status, Task, TaskStore};

fn main() {
    println!("=== Clara Task Manager - CRUD Demo ===\n");
    
    // Initialize database
    let store = TaskStore::new().expect("Failed to create task store");
    
    // CREATE: Insert multiple tasks
    println!("📝 CREATE - Adding tasks...");
    let task1 = Task {
        id: 0, // Will be auto-generated by DB
        title: String::from("Write clara repl"),
        created_at: Utc::now(),
        status: Status::Todo,
    };
    
    let task2 = Task {
        id: 0,
        title: String::from("Add CLI argument parsing"),
        created_at: Utc::now(),
        status: Status::Todo,
    };
    
    let task3 = Task {
        id: 0,
        title: String::from("Implement task persistence"),
        created_at: Utc::now(),
        status: Status::InProgress,
    };
    
    store.insert(&task1).expect("Failed to insert task1");
    store.insert(&task2).expect("Failed to insert task2");
    store.insert(&task3).expect("Failed to insert task3");
    println!("✅ Added 3 tasks\n");
    
    // READ: List all tasks
    println!("📖 READ - Listing all tasks:");
    let tasks = store.list().expect("Failed to list tasks");
    for task in &tasks {
        println!("  {}", task);
    }
    println!();
    
    // UPDATE: Change status of first task
    if let Some(first_task) = tasks.first() {
        println!("🔄 UPDATE - Marking task {} as 'doing'...", first_task.id);
        store.update(first_task.id, Status::InProgress).expect("Failed to update task");
        println!("✅ Updated task {}\n", first_task.id);
        
        // Show updated list
        println!("📖 READ - Updated task list:");
        let updated_tasks = store.list().expect("Failed to list tasks");
        for task in &updated_tasks {
            println!("  {}", task);
        }
        println!();
        
        // UPDATE: Mark task as done
        println!("🔄 UPDATE - Marking task {} as 'done'...", first_task.id);
        store.update(first_task.id, Status::Done).expect("Failed to update task");
        println!("✅ Completed task {}\n", first_task.id);
    }
    
    // DELETE: Remove the last task
    let final_tasks = store.list().expect("Failed to list tasks");
    if let Some(last_task) = final_tasks.last() {
        println!("🗑️  DELETE - Removing task {}...", last_task.id);
        store.delete(last_task.id).expect("Failed to delete task");
        println!("✅ Deleted task {}\n", last_task.id);
    }
    
    // FINAL READ: Show remaining tasks
    println!("📖 READ - Final task list:");
    let remaining_tasks = store.list().expect("Failed to list tasks");
    if remaining_tasks.is_empty() {
        println!("  No tasks remaining");
    } else {
        for task in remaining_tasks {
            println!("  {}", task);
        }
    }
    
    println!("\n🎉 CRUD demo completed!");
}
