use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::fmt;

#[derive(Debug)]
pub enum Status {
    Todo,
    InProgress,
    Done,
}

impl fmt::Display for Status {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Status::Todo => write!(f, "todo"),
            Status::InProgress => write!(f, "doing"),
            Status::Done => write!(f, "done"),
        }
    }
}

impl Status {
    pub fn from_string(s: &str) -> Self {
        match s {
            "todo" => Status::Todo,
            "doing" => Status::InProgress,
            "done" => Status::Done,
            _ => Status::Todo,
        }
    }
}

#[derive(Debug)]
pub struct Task {
    pub id: u32,
    pub title: String,
    pub status: Status,
    pub created_at: DateTime<Utc>,
}

impl fmt::Display for Task {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "Task ID: {}, Title: {}, Status: {:?}, Created At: {}",
            self.id, self.title, self.status, self.created_at
        )
    }
}

#[derive(Serialize, Deserialize)]
pub struct TaskDraft {
    pub title: String,
    pub status: String,
}

impl TaskDraft {
    pub fn new() -> Self {
        TaskDraft {
            title: String::new(),
            status: String::from("todo"),
        }
    }

    pub fn to_task(self) -> Result<Task, String> {
        if self.title.trim().is_empty() {
            return Err("Task title cannot be empty".to_string());
        }

        let status = match self.status.to_lowercase().as_str() {
            "todo" => Status::Todo,
            "doing" | "in_progress" => Status::InProgress,
            "done" => Status::Done,
            _ => return Err("Invalid status. Use: todo, doing, or done".to_string()),
        };

        Ok(Task {
            id: 0, // Will be auto-generated by DB
            title: self.title.trim().to_string(),
            created_at: Utc::now(),
            status,
        })
    }

    pub fn to_toml(&self) -> Result<String, toml::ser::Error> {
        toml::to_string_pretty(self)
    }

    pub fn from_toml(toml: &str) -> Result<Self, toml::de::Error> {
        toml::from_str(toml)
    }
}

impl Task {
    pub fn to_draft(&self) -> TaskDraft {
        TaskDraft {
            title: self.title.clone(),
            status: self.status.to_string(),
        }
    }
}
